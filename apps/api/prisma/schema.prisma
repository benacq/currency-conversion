// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CurrencyCode {
  NGN
  GHS
  USD
  KES
  EUR
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Currency {
  id     Int          @id @default(autoincrement())
  code   CurrencyCode @unique
  name   String
  symbol String
  flag String

  wallets             Wallet[]       @relation("Currency")
  sourceExchangeRates ExchangeRate[] @relation("SourceCurrency")
  targetExchangeRates ExchangeRate[] @relation("TargetCurrency")
}

// ExchangeRate model
model ExchangeRate {
  sourceCurrencyId Int
  targetCurrencyId Int
  rate             Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Foreign keys
  sourceCurrency Currency @relation("SourceCurrency", fields: [sourceCurrencyId], references: [id])
  targetCurrency Currency @relation("TargetCurrency", fields: [targetCurrencyId], references: [id])

  // Composite primary key
  @@id([sourceCurrencyId, targetCurrencyId])
}

model Wallet {
  id         String   @id @default(uuid())
  balance    Float
  currencyId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  creditHistory Transaction[] @relation("destinationWallet")
  debitHistory  Transaction[] @relation("sourceWallet")
  
  currency      Currency      @relation("Currency", fields: [currencyId], references: [id])
}

model Transaction {
  id           String            @id @default(uuid())
  type         TransactionType
  amount       Float
  currencyCode CurrencyCode
  status       TransactionStatus

  sourceWalletId      String
  destinationWalletId String

  timestamp DateTime @default(now())

  source      Wallet @relation(name: "sourceWallet", fields: [sourceWalletId], references: [id])
  destination Wallet @relation(name: "destinationWallet", fields: [destinationWalletId], references: [id])
}
